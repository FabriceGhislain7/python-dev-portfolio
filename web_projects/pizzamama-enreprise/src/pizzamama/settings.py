"""
Django settings for pizzamama project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1%ge=2_ef%$2!f%ei(soc0%zeefhz+u&=fx0y965pi)p9y(wk&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # ========================================
    # THIRD PARTY APPS - MANUALMENTE AGGIUNTE
    # ========================================
    # Django REST Framework - Step 6: API framework principale
    'rest_framework',
    'rest_framework.authtoken',

    # django-filter - Step 11: Filtering avanzato per API
    'django_filters',
    
    # corsheaders - Step 11: CORS per frontend separation
    'corsheaders',
    
    # drf-spectacular - Step 11: Documentazione OpenAPI automatica
    'drf_spectacular',

    # ========================================
    # LOCAL APPS - ARCHITETTURA ENTERPRISE
    # ========================================
    # Step 7-8: App accounts - User management enterprise con CustomUser
    'apps.accounts',
    
    # Step 9: App products - Catalogo pizze con inventory management
    'apps.products',
    
    # Step 10: App orders - E-commerce workflow completo
    'apps.orders',
]

MIDDLEWARE = [
    # ========================================
    # CORS MIDDLEWARE - STEP 11 API ENTERPRISE
    # ========================================
    # corsheaders middleware deve essere il primo per gestire CORS correttamente
    'corsheaders.middleware.CorsMiddleware',
    
    # Django middleware standard
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pizzamama.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Step 12: Aggiunta directory templates globale per frontend
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Step 12: Aggiunto media context processor per templates
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'pizzamama.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# Step 12: Modificato per italiano frontend
LANGUAGE_CODE = 'it-it'

# Step 12: Modificato per timezone Italia
TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Step 12: Aggiunta configurazione static files per frontend
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Step 12: Directory per collectstatic in produzione
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ========================================
# CUSTOM USER MODEL - STEP 8 ENTERPRISE
# ========================================
# Configurazione CustomUser per sistema utenti enterprise
# IMPORTANTE: Deve essere configurato prima delle prime migrazioni
AUTH_USER_MODEL = 'accounts.CustomUser'

# ========================================
# DJANGO REST FRAMEWORK - STEP 6 & 11
# ========================================
# Configurazione API REST enterprise con security-first approach
REST_FRAMEWORK = {
    # Authentication: Token + Session per compatibilit√†
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',  # Step 11: Token per API
        'rest_framework.authentication.BasicAuthentication',
    ],
    
    # Permissions: IsAuthenticated come default per sicurezza
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    
    # Pagination: Performance optimization per large datasets
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    
    # Step 11: Filter backends avanzati per API enterprise
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # Filtering complesso
        'rest_framework.filters.SearchFilter',               # Text search
        'rest_framework.filters.OrderingFilter',             # Sorting
    ],
    
    # Step 11: Schema generation per documentazione automatica
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# ========================================
# API DOCUMENTATION - STEP 11 ENTERPRISE
# ========================================
# Configurazione documentazione OpenAPI automatica con Swagger/ReDoc
SPECTACULAR_SETTINGS = {
    'TITLE': 'PizzaMama Enterprise API',
    'DESCRIPTION': 'Complete REST API for PizzaMama e-commerce platform',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
}

# ========================================
# CORS CONFIGURATION - STEP 11 FRONTEND
# ========================================
# Configurazione CORS per supportare frontend separati (React, Vue, etc.)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:8080",  # Vue dev server
    "http://127.0.0.1:8080",
]

# Permetti credentials (cookies, auth headers) nelle richieste CORS
CORS_ALLOW_CREDENTIALS = True

# ========================================
# TOKEN AUTHENTICATION - STEP 11
# ========================================
# Per ora usiamo Token standard DRF (futuro: JWT per production)
REST_USE_JWT = False

# ========================================
# MEDIA FILES - STEP 12 FRONTEND
# ========================================
# Configurazione per upload file utenti (immagini pizze, avatar, etc.)

# Media files (uploads) - Step 12: Per gestire immagini caricate dagli utenti
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ========================================
# CONFIGURAZIONI PERSONALIZZATE ITALIANE - STEP 12
# ========================================
# Configurazioni custom per il progetto PizzaMama con nomi italiani

# Step 12: Configurazione cartelle media organizzate in italiano
CARTELLE_MEDIA_ITALIANE = {
    'pizze': 'pizze/',
    'categorie': 'categorie/',
    'avatar_utenti': 'avatar/',
    'ingredienti': 'ingredienti/',
    'documenti': 'documenti/',
}

# Step 12: Impostazioni upload immagini con nomi italiani
DIMENSIONI_IMMAGINI = {
    'pizza_principale': (800, 600),      # Immagine principale pizza
    'pizza_galleria': (400, 300),       # Immagini galleria
    'avatar_utente': (150, 150),        # Avatar profilo utente
    'categoria_icona': (100, 100),      # Icone categorie
    'ingrediente_foto': (200, 200),     # Foto ingredienti
}

# Step 12: Configurazione notifiche sistema
CONFIGURAZIONE_NOTIFICHE = {
    'email_ordini': True,               # Email conferma ordini
    'sms_consegna': False,              # SMS tracking consegna (da implementare)
    'push_browser': True,               # Notifiche push browser
    'timeout_notifica': 5000,          # Timeout notifiche in ms
}

# Step 12: Impostazioni business PizzaMama
IMPOSTAZIONI_BUSINESS = {
    'costo_consegna_base': 3.00,       # Costo base consegna in euro
    'ordine_minimo_gratuito': 25.00,   # Soglia ordine minimo per consegna gratuita
    'tempo_preparazione_base': 15,     # Tempo base preparazione in minuti
    'raggio_consegna_km': 10,          # Raggio massimo consegna in km
    'iva_percentuale': 22,             # IVA in percentuale
}

# Step 12: Configurazione loyalty program
LOYALTY_PROGRAM = {
    'punti_per_euro': 1,               # Punti guadagnati per euro speso
    'punti_tier_bronze': 100,          # Punti per tier Bronze
    'punti_tier_silver': 500,          # Punti per tier Silver  
    'punti_tier_gold': 1000,           # Punti per tier Gold
    'sconto_bronze': 5,                # Sconto Bronze in percentuale
    'sconto_silver': 10,               # Sconto Silver in percentuale
    'sconto_gold': 15,                 # Sconto Gold in percentuale
}

# ========================================
# SECURITY SETTINGS - STEP 12 FRONTEND
# ========================================
# Impostazioni sicurezza per upload file

# Step 12: Limite dimensione upload file (10MB)
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = FILE_UPLOAD_MAX_MEMORY_SIZE

# Step 12: Formati immagine consentiti per upload (nomi italiani)
ESTENSIONI_IMMAGINI_CONSENTITE = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
DIMENSIONE_MASSIMA_IMMAGINE = 5 * 1024 * 1024  # 5MB

# Step 12: Validazione upload con nomi italiani
VALIDAZIONI_UPLOAD = {
    'verifica_formato': True,          # Verifica formato file
    'scansione_virus': False,          # Scansione antivirus (da implementare)
    'ridimensiona_automatico': True,   # Ridimensionamento automatico
    'watermark_aziendale': False,      # Watermark PizzaMama (futuro)
}

# ========================================
# LOGIN/LOGOUT URLS - STEP 12 AUTH
# ========================================
# URL redirect dopo login/logout per frontend

# Step 12: URL per login form
LOGIN_URL = '/utenti/accesso/'

# Step 12: Redirect dopo login successful  
LOGIN_REDIRECT_URL = '/dashboard/'

# Step 12: Redirect dopo logout
LOGOUT_REDIRECT_URL = '/'

# ========================================
# CONFIGURAZIONE EMAIL - STEP 12 COMUNICAZIONI
# ========================================
# Configurazione email per notifiche sistema (development)

# Step 12: Backend email per development (console)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Step 12: Impostazioni email mittente
EMAIL_MITTENTE_PREDEFINITO = 'noreply@pizzamama.it'
EMAIL_NOME_AZIENDA = 'PizzaMama Enterprise'

# Step 12: Template email personalizzati
TEMPLATE_EMAIL_PERSONALIZZATI = {
    'conferma_ordine': 'emails/conferma_ordine.html',
    'stato_ordine': 'emails/aggiornamento_stato.html', 
    'benvenuto_utente': 'emails/benvenuto.html',
    'reset_password': 'emails/reset_password.html',
}

# ========================================
# CACHE CONFIGURATION - STEP 12 PERFORMANCE  
# ========================================
# Configurazione cache per migliorare performance (development)

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'pizzamama-cache-locale',
        'TIMEOUT': 300,  # 5 minuti
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Step 12: Timeout cache per diversi contenuti
TIMEOUT_CACHE_CONTENUTI = {
    'lista_pizze': 600,        # 10 minuti
    'categorie': 1800,         # 30 minuti  
    'ingredienti': 3600,       # 1 ora
    'profilo_utente': 300,     # 5 minuti
}

# ========================================
# LOGGING CONFIGURATION - STEP 12 DEBUG (FIXED)
# ========================================
# Configurazione logging per development e debug

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'dettagliato': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'semplice': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'semplice',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'pizzamama.log',  # ‚Üê FIX: File nella root invece di logs/
            'formatter': 'dettagliato',
        },
    },
    'root': {
        'handlers': ['console'],  # ‚Üê Solo console per ora
        'level': 'INFO',
    },
    'loggers': {
        'pizzamama': {
            'handlers': ['console'],  # ‚Üê Solo console, rimuovo 'file'
            'level': 'DEBUG',
            'propagate': False,
        },
        'apps.orders': {
            'handlers': ['console'],  # ‚Üê Solo console, rimuovo 'file'
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# ========================================
# SESSION CONFIGURATION - STEP 12 UTENTI
# ========================================
# Configurazione sessioni utente

# Step 12: Durata sessione (2 settimane)
SESSION_COOKIE_AGE = 1209600  # 2 settimane in secondi

# Step 12: Nome cookie sessione personalizzato
SESSION_COOKIE_NAME = 'pizzamama_sessione'

# Step 12: Sicurezza cookie
SESSION_COOKIE_SECURE = False  # True in production con HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# ========================================
# VARIABILI AMBIENTE LOCALI - STEP 12
# ========================================
# Variabili per environment specifico (development)

# Step 12: Flag per features in sviluppo
FUNZIONALITA_SPERIMENTALI = {
    'chat_assistenza': False,          # Chat assistenza clienti
    'pagamento_paypal': False,         # Integrazione PayPal
    'delivery_tracking_gps': False,    # Tracking GPS real-time
    'raccomandazioni_ai': False,       # Raccomandazioni AI
    'programma_referral': False,       # Programma referral
}

# Step 12: Debug toolbar per development
if DEBUG:
    try:
        import debug_toolbar
        INSTALLED_APPS.append('debug_toolbar')
        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
        INTERNAL_IPS = ['127.0.0.1']
    except ImportError:
        pass

# Step 12: Configurazione development finale
AMBIENTE_SVILUPPO = {
    'versione_api': '1.0.0',
    'modalita_debug': DEBUG,
    'database_type': 'SQLite',
    'cache_abilitata': True,
    'logging_dettagliato': True,
}