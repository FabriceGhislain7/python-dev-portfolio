"""
Django settings for pizzamama project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1%ge=2_ef%$2!f%ei(soc0%zeefhz+u&=fx0y965pi)p9y(wk&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # ========================================
    # THIRD PARTY APPS - MANUALMENTE AGGIUNTE
    # ========================================
    # Django REST Framework - Step 6: API framework principale
    'rest_framework',
    'rest_framework.authtoken',

    # django-filter - Step 11: Filtering avanzato per API
    'django_filters',
    
    # corsheaders - Step 11: CORS per frontend separation
    'corsheaders',
    
    # drf-spectacular - Step 11: Documentazione OpenAPI automatica
    'drf_spectacular',

    # ========================================
    # LOCAL APPS - ARCHITETTURA ENTERPRISE
    # ========================================
    # Step 7-8: App accounts - User management enterprise con CustomUser
    'apps.accounts',
    
    # Step 9: App products - Catalogo pizze con inventory management
    'apps.products',
    
    # Step 10: App orders - E-commerce workflow completo
    'apps.orders',
]

MIDDLEWARE = [
    # ========================================
    # CORS MIDDLEWARE - STEP 11 API ENTERPRISE
    # ========================================
    # corsheaders middleware deve essere il primo per gestire CORS correttamente
    'corsheaders.middleware.CorsMiddleware',
    
    # Django middleware standard
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pizzamama.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pizzamama.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ========================================
# CUSTOM USER MODEL - STEP 8 ENTERPRISE
# ========================================
# Configurazione CustomUser per sistema utenti enterprise
# IMPORTANTE: Deve essere configurato prima delle prime migrazioni
AUTH_USER_MODEL = 'accounts.CustomUser'

# ========================================
# DJANGO REST FRAMEWORK - STEP 6 & 11
# ========================================
# Configurazione API REST enterprise con security-first approach
REST_FRAMEWORK = {
    # Authentication: Token + Session per compatibilit√†
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',  # Step 11: Token per API
        'rest_framework.authentication.BasicAuthentication',
    ],
    
    # Permissions: IsAuthenticated come default per sicurezza
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    
    # Pagination: Performance optimization per large datasets
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    
    # Step 11: Filter backends avanzati per API enterprise
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # Filtering complesso
        'rest_framework.filters.SearchFilter',               # Text search
        'rest_framework.filters.OrderingFilter',             # Sorting
    ],
    
    # Step 11: Schema generation per documentazione automatica
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# ========================================
# API DOCUMENTATION - STEP 11 ENTERPRISE
# ========================================
# Configurazione documentazione OpenAPI automatica con Swagger/ReDoc
SPECTACULAR_SETTINGS = {
    'TITLE': 'PizzaMama Enterprise API',
    'DESCRIPTION': 'Complete REST API for PizzaMama e-commerce platform',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
}

# ========================================
# CORS CONFIGURATION - STEP 11 FRONTEND
# ========================================
# Configurazione CORS per supportare frontend separati (React, Vue, etc.)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:8080",  # Vue dev server
    "http://127.0.0.1:8080",
]

# Permetti credentials (cookies, auth headers) nelle richieste CORS
CORS_ALLOW_CREDENTIALS = True

# ========================================
# TOKEN AUTHENTICATION - STEP 11
# ========================================
# Per ora usiamo Token standard DRF (futuro: JWT per production)
REST_USE_JWT = False